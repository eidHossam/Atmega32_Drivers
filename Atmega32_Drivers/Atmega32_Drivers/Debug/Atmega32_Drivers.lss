
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000008ba  0000094e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007a  0080007a  00000968  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034ad  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f1  00000000  00000000  000041e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fa2  00000000  00000000  000054d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a4c  00000000  00000000  00007474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c5e  00000000  00000000  00007ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d5a  00000000  00000000  00009b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000b878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <__vector_4>
  14:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_10>
  2c:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_11>
  30:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_12>
  34:	0c 94 c1 03 	jmp	0x782	; 0x782 <__vector_13>
  38:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_14>
  3c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_15>
  40:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 04 	call	0x86c	; 0x86c <main>
  8a:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_delay_ms>:
	
	config.pinNumber = LCD_D7;
	config.pinMode = GPIO_MODE_OUTPUT;
	MCAL_GPIO_Init(LCD_CTRL_PORT, &config);
#endif
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <_delay_ms+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	19 82       	std	Y+1, r1	; 0x01
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <_delay_ms+0x24>
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	03 c0       	rjmp	.+6      	; 0xaa <_delay_ms+0x18>
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	9f 5f       	subi	r25, 0xFF	; 255
  a8:	9a 83       	std	Y+2, r25	; 0x02
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	94 36       	cpi	r25, 0x64	; 100
  ae:	d0 f3       	brcs	.-12     	; 0xa4 <_delay_ms+0x12>
  b0:	99 81       	ldd	r25, Y+1	; 0x01
  b2:	9f 5f       	subi	r25, 0xFF	; 255
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	99 81       	ldd	r25, Y+1	; 0x01
  b8:	98 17       	cp	r25, r24
  ba:	90 f3       	brcs	.-28     	; 0xa0 <_delay_ms+0xe>
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <LCD_Enable_Pulse>:
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	89 e3       	ldi	r24, 0x39	; 57
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
  d2:	82 e3       	ldi	r24, 0x32	; 50
  d4:	0e 94 49 00 	call	0x92	; 0x92 <_delay_ms>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	89 e3       	ldi	r24, 0x39	; 57
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
  e4:	08 95       	ret

000000e6 <LCD_Send_Command>:
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	89 e3       	ldi	r24, 0x39	; 57
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	89 e3       	ldi	r24, 0x39	; 57
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 102:	4c 2f       	mov	r20, r28
 104:	40 71       	andi	r20, 0x10	; 16
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	55 95       	asr	r21
 10a:	47 95       	ror	r20
 10c:	55 95       	asr	r21
 10e:	47 95       	ror	r20
 110:	55 95       	asr	r21
 112:	47 95       	ror	r20
 114:	55 95       	asr	r21
 116:	47 95       	ror	r20
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	89 e3       	ldi	r24, 0x39	; 57
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 122:	4c 2f       	mov	r20, r28
 124:	40 72       	andi	r20, 0x20	; 32
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	55 95       	asr	r21
 12a:	47 95       	ror	r20
 12c:	55 95       	asr	r21
 12e:	47 95       	ror	r20
 130:	55 95       	asr	r21
 132:	47 95       	ror	r20
 134:	55 95       	asr	r21
 136:	47 95       	ror	r20
 138:	55 95       	asr	r21
 13a:	47 95       	ror	r20
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	89 e3       	ldi	r24, 0x39	; 57
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 146:	4c 2f       	mov	r20, r28
 148:	40 74       	andi	r20, 0x40	; 64
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	04 2e       	mov	r0, r20
 14e:	45 2f       	mov	r20, r21
 150:	00 0c       	add	r0, r0
 152:	44 1f       	adc	r20, r20
 154:	55 0b       	sbc	r21, r21
 156:	00 0c       	add	r0, r0
 158:	44 1f       	adc	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	64 e0       	ldi	r22, 0x04	; 4
 15e:	89 e3       	ldi	r24, 0x39	; 57
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 166:	4c 2f       	mov	r20, r28
 168:	44 1f       	adc	r20, r20
 16a:	44 27       	eor	r20, r20
 16c:	44 1f       	adc	r20, r20
 16e:	65 e0       	ldi	r22, 0x05	; 5
 170:	89 e3       	ldi	r24, 0x39	; 57
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 178:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Enable_Pulse>
 17c:	4c 2f       	mov	r20, r28
 17e:	41 70       	andi	r20, 0x01	; 1
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	89 e3       	ldi	r24, 0x39	; 57
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 18a:	4c 2f       	mov	r20, r28
 18c:	42 70       	andi	r20, 0x02	; 2
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	55 95       	asr	r21
 192:	47 95       	ror	r20
 194:	63 e0       	ldi	r22, 0x03	; 3
 196:	89 e3       	ldi	r24, 0x39	; 57
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 19e:	4c 2f       	mov	r20, r28
 1a0:	44 70       	andi	r20, 0x04	; 4
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	55 95       	asr	r21
 1a6:	47 95       	ror	r20
 1a8:	55 95       	asr	r21
 1aa:	47 95       	ror	r20
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	89 e3       	ldi	r24, 0x39	; 57
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 1b6:	c8 70       	andi	r28, 0x08	; 8
 1b8:	4c 2f       	mov	r20, r28
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	55 95       	asr	r21
 1be:	47 95       	ror	r20
 1c0:	55 95       	asr	r21
 1c2:	47 95       	ror	r20
 1c4:	55 95       	asr	r21
 1c6:	47 95       	ror	r20
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	89 e3       	ldi	r24, 0x39	; 57
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 1d2:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Enable_Pulse>
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <LCD_Init>:
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	84 e1       	ldi	r24, 0x14	; 20
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <_delay_ms>
 1e6:	c6 e9       	ldi	r28, 0x96	; 150
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	18 82       	st	Y, r1
 1ec:	11 e0       	ldi	r17, 0x01	; 1
 1ee:	19 83       	std	Y+1, r17	; 0x01
 1f0:	be 01       	movw	r22, r28
 1f2:	89 e3       	ldi	r24, 0x39	; 57
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 1fa:	18 83       	st	Y, r17
 1fc:	19 83       	std	Y+1, r17	; 0x01
 1fe:	be 01       	movw	r22, r28
 200:	89 e3       	ldi	r24, 0x39	; 57
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	89 e3       	ldi	r24, 0x39	; 57
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	89 e3       	ldi	r24, 0x39	; 57
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	0e 94 49 00 	call	0x92	; 0x92 <_delay_ms>
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	88 83       	st	Y, r24
 22a:	19 83       	std	Y+1, r17	; 0x01
 22c:	be 01       	movw	r22, r28
 22e:	89 e3       	ldi	r24, 0x39	; 57
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	88 83       	st	Y, r24
 23a:	19 83       	std	Y+1, r17	; 0x01
 23c:	be 01       	movw	r22, r28
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	88 83       	st	Y, r24
 24a:	19 83       	std	Y+1, r17	; 0x01
 24c:	be 01       	movw	r22, r28
 24e:	89 e3       	ldi	r24, 0x39	; 57
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	88 83       	st	Y, r24
 25a:	19 83       	std	Y+1, r17	; 0x01
 25c:	be 01       	movw	r22, r28
 25e:	89 e3       	ldi	r24, 0x39	; 57
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
 266:	85 e0       	ldi	r24, 0x05	; 5
 268:	0e 94 49 00 	call	0x92	; 0x92 <_delay_ms>
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	08 95       	ret

00000292 <LCD_Cursor_XY>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	60 31       	cpi	r22, 0x10	; 16
 298:	18 f5       	brcc	.+70     	; 0x2e0 <LCD_Cursor_XY+0x4e>
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	08 f5       	brcc	.+66     	; 0x2e0 <LCD_Cursor_XY+0x4e>
 29e:	d6 2f       	mov	r29, r22
 2a0:	c8 2f       	mov	r28, r24
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	59 f0       	breq	.+22     	; 0x2bc <LCD_Cursor_XY+0x2a>
 2a6:	28 f0       	brcs	.+10     	; 0x2b2 <LCD_Cursor_XY+0x20>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	69 f0       	breq	.+26     	; 0x2c6 <LCD_Cursor_XY+0x34>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	81 f0       	breq	.+32     	; 0x2d0 <LCD_Cursor_XY+0x3e>
 2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <LCD_Cursor_XY+0x46>
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	86 0f       	add	r24, r22
 2b6:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 2ba:	0e c0       	rjmp	.+28     	; 0x2d8 <LCD_Cursor_XY+0x46>
 2bc:	80 ec       	ldi	r24, 0xC0	; 192
 2be:	86 0f       	add	r24, r22
 2c0:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <LCD_Cursor_XY+0x46>
 2c6:	80 e9       	ldi	r24, 0x90	; 144
 2c8:	86 0f       	add	r24, r22
 2ca:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <LCD_Cursor_XY+0x46>
 2d0:	80 ed       	ldi	r24, 0xD0	; 208
 2d2:	86 0f       	add	r24, r22
 2d4:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
 2d8:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__data_end>
 2dc:	d0 93 7b 00 	sts	0x007B, r29	; 0x80007b <charCounter>
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <LCD_Clear_Screen>:
 * Note			:   none.
============================================================================================================
 */
void LCD_Clear_Screen()
{
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
	charCounter = 0;
 2ec:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <charCounter>
	lineCounter = 0;
 2f0:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 2f4:	08 95       	ret

000002f6 <Check_End_Of_Line>:
============================================================================================================
 */
void Check_End_Of_Line()
{
	//If the first line is full go to the next line
	if(charCounter >= LCD_WIDTH && lineCounter < LCD_HEIGHT - 1)
 2f6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <charCounter>
 2fa:	90 31       	cpi	r25, 0x10	; 16
 2fc:	68 f0       	brcs	.+26     	; 0x318 <Check_End_Of_Line+0x22>
 2fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 302:	83 30       	cpi	r24, 0x03	; 3
 304:	48 f4       	brcc	.+18     	; 0x318 <Check_End_Of_Line+0x22>
	{
		charCounter = 0;
 306:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <charCounter>
		lineCounter++;
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
		LCD_Cursor_XY(lineCounter, 0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Cursor_XY>
 316:	08 95       	ret
	}else if(charCounter >= LCD_WIDTH && lineCounter == LCD_HEIGHT - 1)
 318:	90 31       	cpi	r25, 0x10	; 16
 31a:	68 f0       	brcs	.+26     	; 0x336 <Check_End_Of_Line+0x40>
 31c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 320:	83 30       	cpi	r24, 0x03	; 3
 322:	49 f4       	brne	.+18     	; 0x336 <Check_End_Of_Line+0x40>
	{
		LCD_Clear_Screen();
 324:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Clear_Screen>
		LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 73 00 	call	0xe6	; 0xe6 <LCD_Send_Command>
		charCounter = 0;
 32e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <charCounter>
		lineCounter = 0;
 332:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 336:	08 95       	ret

00000338 <LCD_Send_Char>:
* Note			:   when you get to the end of the line the next character will be printed on the next line.
*               :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_Char(uint8_t data)
{
 338:	cf 93       	push	r28
 33a:	c8 2f       	mov	r28, r24
	/*Check if the LCD is busy*/
	/*LCD_Busy_Wait();*/
	Check_End_Of_Line();
 33c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Check_End_Of_Line>

	/*Data reigster, Write operation and Enable zero*/
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_RS_PIN, LCD_DATA_REG);
 340:	41 e0       	ldi	r20, 0x01	; 1
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL_PORT, LCD_EN_PIN, GPIO_PIN_LOW);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	89 e3       	ldi	r24, 0x39	; 57
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));

	LCD_Enable_Pulse();
#elif LCD_MODE_ == FOUR_BIT_MODE
	/*Send the data upper nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 4));
 358:	4c 2f       	mov	r20, r28
 35a:	40 71       	andi	r20, 0x10	; 16
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	55 95       	asr	r21
 364:	47 95       	ror	r20
 366:	55 95       	asr	r21
 368:	47 95       	ror	r20
 36a:	55 95       	asr	r21
 36c:	47 95       	ror	r20
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	89 e3       	ldi	r24, 0x39	; 57
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 5));
 378:	4c 2f       	mov	r20, r28
 37a:	40 72       	andi	r20, 0x20	; 32
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	55 95       	asr	r21
 380:	47 95       	ror	r20
 382:	55 95       	asr	r21
 384:	47 95       	ror	r20
 386:	55 95       	asr	r21
 388:	47 95       	ror	r20
 38a:	55 95       	asr	r21
 38c:	47 95       	ror	r20
 38e:	55 95       	asr	r21
 390:	47 95       	ror	r20
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	89 e3       	ldi	r24, 0x39	; 57
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 6));
 39c:	4c 2f       	mov	r20, r28
 39e:	40 74       	andi	r20, 0x40	; 64
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	04 2e       	mov	r0, r20
 3a4:	45 2f       	mov	r20, r21
 3a6:	00 0c       	add	r0, r0
 3a8:	44 1f       	adc	r20, r20
 3aa:	55 0b       	sbc	r21, r21
 3ac:	00 0c       	add	r0, r0
 3ae:	44 1f       	adc	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	64 e0       	ldi	r22, 0x04	; 4
 3b4:	89 e3       	ldi	r24, 0x39	; 57
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 7));
 3bc:	4c 2f       	mov	r20, r28
 3be:	44 1f       	adc	r20, r20
 3c0:	44 27       	eor	r20, r20
 3c2:	44 1f       	adc	r20, r20
 3c4:	65 e0       	ldi	r22, 0x05	; 5
 3c6:	89 e3       	ldi	r24, 0x39	; 57
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 3ce:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Enable_Pulse>

	/*Send the data lower nibble first*/
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D4, READ_BIT(data, 0));
 3d2:	4c 2f       	mov	r20, r28
 3d4:	41 70       	andi	r20, 0x01	; 1
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	89 e3       	ldi	r24, 0x39	; 57
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D5, READ_BIT(data, 1));
 3e0:	4c 2f       	mov	r20, r28
 3e2:	42 70       	andi	r20, 0x02	; 2
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	55 95       	asr	r21
 3e8:	47 95       	ror	r20
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	89 e3       	ldi	r24, 0x39	; 57
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D6, READ_BIT(data, 2));
 3f4:	4c 2f       	mov	r20, r28
 3f6:	44 70       	andi	r20, 0x04	; 4
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	55 95       	asr	r21
 3fc:	47 95       	ror	r20
 3fe:	55 95       	asr	r21
 400:	47 95       	ror	r20
 402:	64 e0       	ldi	r22, 0x04	; 4
 404:	89 e3       	ldi	r24, 0x39	; 57
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT, LCD_D7, READ_BIT(data, 3));
 40c:	c8 70       	andi	r28, 0x08	; 8
 40e:	4c 2f       	mov	r20, r28
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	55 95       	asr	r21
 414:	47 95       	ror	r20
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	55 95       	asr	r21
 41c:	47 95       	ror	r20
 41e:	65 e0       	ldi	r22, 0x05	; 5
 420:	89 e3       	ldi	r24, 0x39	; 57
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 be 02 	call	0x57c	; 0x57c <MCAL_GPIO_WritePin>
	LCD_Enable_Pulse();
 428:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Enable_Pulse>
#endif
	charCounter++;
 42c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <charCounter>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <charCounter>
}
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <LCD_Send_String>:
 * Note			:   when you get to the end of the line the next character will be printed on the next line.
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
	while(*string)
 440:	03 c0       	rjmp	.+6      	; 0x448 <LCD_Send_String+0xe>
	{
		LCD_Send_Char(*string++);
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_Send_Char>
 *              :   if the entire LCD is full the LCD will be cleared first then print the character.
============================================================================================================
 */
void LCD_Send_String(uint8_t* string)
{
	while(*string)
 448:	88 81       	ld	r24, Y
 44a:	81 11       	cpse	r24, r1
 44c:	fa cf       	rjmp	.-12     	; 0x442 <LCD_Send_String+0x8>
	{
		LCD_Send_Char(*string++);
	}
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <HAL_PIR_Init>:
 * 
 * @param GPIOx : The GPIO port of that is connected to the PIR sensor.
 * @param copy_PIR_Pin : The GPIO pin of that is connected to the PIR sensor.
 */
void HAL_PIR_Init(volatile GPIO_typedef* GPIOx, uint8_t copy_PIR_Pin)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	00 d0       	rcall	.+0      	; 0x45a <HAL_PIR_Init+0x6>
 45a:	cd b7       	in	r28, 0x3d	; 61
 45c:	de b7       	in	r29, 0x3e	; 62
    GPIO_Pin_Config_t cfg;

    cfg.pinMode = GPIO_MODE_INPUT_FLOATING;
 45e:	1a 82       	std	Y+2, r1	; 0x02
    cfg.pinNumber = copy_PIR_Pin;
 460:	69 83       	std	Y+1, r22	; 0x01

    MCAL_GPIO_Init(GPIOx, &cfg);
 462:	be 01       	movw	r22, r28
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <MCAL_GPIO_Init>
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	08 95       	ret

00000476 <HAL_PIR_ReadStatus>:
{
    ePIRStatus_t LOC_u8PIRStatus;
    uint8_t LOC_u8PinStatus;
    
    /*Read the value of the pin conected to the sensor*/
    LOC_u8PinStatus = MCAL_GPIO_ReadPin(GPIOx, copy_PIR_Pin);
 476:	0e 94 a5 02 	call	0x54a	; 0x54a <MCAL_GPIO_ReadPin>

    /*Determine the status of the PIR sensor*/
    LOC_u8PIRStatus = (LOC_u8PinStatus == GPIO_PIN_HIGH)? PIR_MotionDetected : PIR_NoMotionDetected;
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	81 30       	cpi	r24, 0x01	; 1
 47e:	09 f4       	brne	.+2      	; 0x482 <HAL_PIR_ReadStatus+0xc>
 480:	90 e0       	ldi	r25, 0x00	; 0

    return LOC_u8PIRStatus;
}
 482:	89 2f       	mov	r24, r25
 484:	08 95       	ret

00000486 <__vector_16>:
*               ADC ISR functions
*===============================================
*/

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void){
 486:	1f 92       	push	r1
 488:	0f 92       	push	r0
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	0f 92       	push	r0
 48e:	11 24       	eor	r1, r1
 490:	2f 93       	push	r18
 492:	3f 93       	push	r19
 494:	4f 93       	push	r20
 496:	5f 93       	push	r21
 498:	6f 93       	push	r22
 49a:	7f 93       	push	r23
 49c:	8f 93       	push	r24
 49e:	9f 93       	push	r25
 4a0:	af 93       	push	r26
 4a2:	bf 93       	push	r27
 4a4:	ef 93       	push	r30
 4a6:	ff 93       	push	r31
    
    if(endOfConversionCallback)
 4a8:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <endOfConversionCallback>
 4ac:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <endOfConversionCallback+0x1>
 4b0:	30 97       	sbiw	r30, 0x00	; 0
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <__vector_16+0x30>
    {
        endOfConversionCallback();
 4b4:	09 95       	icall
    }
}
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <MCAL_GPIO_Init>:
{
    uint8_t status;
    status = (uint8_t)(GPIOx->PIN & 0xFF);

    return status;
}
 4d8:	dc 01       	movw	r26, r24
 4da:	fb 01       	movw	r30, r22
 4dc:	81 81       	ldd	r24, Z+1	; 0x01
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	79 f4       	brne	.+30     	; 0x500 <MCAL_GPIO_Init+0x28>
 4e2:	11 96       	adiw	r26, 0x01	; 1
 4e4:	2c 91       	ld	r18, X
 4e6:	11 97       	sbiw	r26, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	00 80       	ld	r0, Z
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <MCAL_GPIO_Init+0x1c>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <MCAL_GPIO_Init+0x18>
 4f8:	82 2b       	or	r24, r18
 4fa:	11 96       	adiw	r26, 0x01	; 1
 4fc:	8c 93       	st	X, r24
 4fe:	08 95       	ret
 500:	11 96       	adiw	r26, 0x01	; 1
 502:	8c 91       	ld	r24, X
 504:	11 97       	sbiw	r26, 0x01	; 1
 506:	21 e0       	ldi	r18, 0x01	; 1
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	00 80       	ld	r0, Z
 50c:	02 c0       	rjmp	.+4      	; 0x512 <MCAL_GPIO_Init+0x3a>
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <MCAL_GPIO_Init+0x36>
 516:	20 95       	com	r18
 518:	28 23       	and	r18, r24
 51a:	11 96       	adiw	r26, 0x01	; 1
 51c:	2c 93       	st	X, r18
 51e:	11 97       	sbiw	r26, 0x01	; 1
 520:	81 81       	ldd	r24, Z+1	; 0x01
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	89 f4       	brne	.+34     	; 0x548 <MCAL_GPIO_Init+0x70>
 526:	80 b7       	in	r24, 0x30	; 48
 528:	8e 7f       	andi	r24, 0xFE	; 254
 52a:	80 bf       	out	0x30, r24	; 48
 52c:	12 96       	adiw	r26, 0x02	; 2
 52e:	2c 91       	ld	r18, X
 530:	12 97       	sbiw	r26, 0x02	; 2
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	00 80       	ld	r0, Z
 538:	02 c0       	rjmp	.+4      	; 0x53e <MCAL_GPIO_Init+0x66>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <MCAL_GPIO_Init+0x62>
 542:	82 2b       	or	r24, r18
 544:	12 96       	adiw	r26, 0x02	; 2
 546:	8c 93       	st	X, r24
 548:	08 95       	ret

0000054a <MCAL_GPIO_ReadPin>:
 54a:	fc 01       	movw	r30, r24
 54c:	40 81       	ld	r20, Z
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	c9 01       	movw	r24, r18
 554:	06 2e       	mov	r0, r22
 556:	02 c0       	rjmp	.+4      	; 0x55c <MCAL_GPIO_ReadPin+0x12>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <MCAL_GPIO_ReadPin+0xe>
 560:	24 2f       	mov	r18, r20
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	28 23       	and	r18, r24
 566:	39 23       	and	r19, r25
 568:	02 c0       	rjmp	.+4      	; 0x56e <MCAL_GPIO_ReadPin+0x24>
 56a:	35 95       	asr	r19
 56c:	27 95       	ror	r18
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <MCAL_GPIO_ReadPin+0x20>
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	23 2b       	or	r18, r19
 576:	09 f4       	brne	.+2      	; 0x57a <MCAL_GPIO_ReadPin+0x30>
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	08 95       	ret

0000057c <MCAL_GPIO_WritePin>:
* @return_value :   none.
* Note			:   none.
*===============================================
*/
void MCAL_GPIO_WritePin(volatile GPIO_typedef * GPIOx, uint8_t pinNumber, uint8_t value)
{
 57c:	fc 01       	movw	r30, r24
    if(value == GPIO_PIN_HIGH)
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	59 f4       	brne	.+22     	; 0x598 <MCAL_GPIO_WritePin+0x1c>
    {
        SET_BIT(GPIOx->PORT, pinNumber);
 582:	22 81       	ldd	r18, Z+2	; 0x02
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <MCAL_GPIO_WritePin+0x12>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <MCAL_GPIO_WritePin+0xe>
 592:	82 2b       	or	r24, r18
 594:	82 83       	std	Z+2, r24	; 0x02
 596:	08 95       	ret
    }else{
        CLEAR_BIT(GPIOx->PORT, pinNumber);
 598:	92 81       	ldd	r25, Z+2	; 0x02
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <MCAL_GPIO_WritePin+0x28>
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <MCAL_GPIO_WritePin+0x24>
 5a8:	20 95       	com	r18
 5aa:	29 23       	and	r18, r25
 5ac:	22 83       	std	Z+2, r18	; 0x02
 5ae:	08 95       	ret

000005b0 <__vector_12>:
*               SPI ISR functions
*===============================================
*/

void __vector_12 (void) __attribute__((signal));
void __vector_12 (void){
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31

  	p_IRQ_callback_SPI();
 5d2:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <p_IRQ_callback_SPI>
 5d6:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <p_IRQ_callback_SPI+0x1>
 5da:	09 95       	icall
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <__vector_10>:
*===============================================
*/

/*Timer/Counter0 Compare Match (Vector number in the datasheet - 1)*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
    
    outputCompareMatchCallback();
 620:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <outputCompareMatchCallback>
 624:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <outputCompareMatchCallback+0x1>
 628:	09 95       	icall
}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <__vector_11>:

/*Timer/Counter0 Overflow*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void){
 64c:	1f 92       	push	r1
 64e:	0f 92       	push	r0
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	0f 92       	push	r0
 654:	11 24       	eor	r1, r1
 656:	2f 93       	push	r18
 658:	3f 93       	push	r19
 65a:	4f 93       	push	r20
 65c:	5f 93       	push	r21
 65e:	6f 93       	push	r22
 660:	7f 93       	push	r23
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	af 93       	push	r26
 668:	bf 93       	push	r27
 66a:	ef 93       	push	r30
 66c:	ff 93       	push	r31

    overflowCounter++;
 66e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <overflowCounter>
 672:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <overflowCounter+0x1>
 676:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <overflowCounter+0x2>
 67a:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <overflowCounter+0x3>
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	a1 1d       	adc	r26, r1
 682:	b1 1d       	adc	r27, r1
 684:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <overflowCounter>
 688:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <overflowCounter+0x1>
 68c:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <overflowCounter+0x2>
 690:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <overflowCounter+0x3>
    overflowCallback();
 694:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <overflowCallback>
 698:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <overflowCallback+0x1>
 69c:	09 95       	icall
}
 69e:	ff 91       	pop	r31
 6a0:	ef 91       	pop	r30
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <__vector_4>:
*===============================================
*/

/*Timer/Counter2 Compare Match (Vector number in the datasheet - 1)*/
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void){
 6c0:	1f 92       	push	r1
 6c2:	0f 92       	push	r0
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	0f 92       	push	r0
 6c8:	11 24       	eor	r1, r1
 6ca:	2f 93       	push	r18
 6cc:	3f 93       	push	r19
 6ce:	4f 93       	push	r20
 6d0:	5f 93       	push	r21
 6d2:	6f 93       	push	r22
 6d4:	7f 93       	push	r23
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	af 93       	push	r26
 6dc:	bf 93       	push	r27
 6de:	ef 93       	push	r30
 6e0:	ff 93       	push	r31
    
    outputCompareMatchCallback();
 6e2:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <outputCompareMatchCallback>
 6e6:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <outputCompareMatchCallback+0x1>
 6ea:	09 95       	icall
}
 6ec:	ff 91       	pop	r31
 6ee:	ef 91       	pop	r30
 6f0:	bf 91       	pop	r27
 6f2:	af 91       	pop	r26
 6f4:	9f 91       	pop	r25
 6f6:	8f 91       	pop	r24
 6f8:	7f 91       	pop	r23
 6fa:	6f 91       	pop	r22
 6fc:	5f 91       	pop	r21
 6fe:	4f 91       	pop	r20
 700:	3f 91       	pop	r19
 702:	2f 91       	pop	r18
 704:	0f 90       	pop	r0
 706:	0f be       	out	0x3f, r0	; 63
 708:	0f 90       	pop	r0
 70a:	1f 90       	pop	r1
 70c:	18 95       	reti

0000070e <__vector_5>:

/*Timer/Counter2 Overflow*/
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void){
 70e:	1f 92       	push	r1
 710:	0f 92       	push	r0
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	0f 92       	push	r0
 716:	11 24       	eor	r1, r1
 718:	2f 93       	push	r18
 71a:	3f 93       	push	r19
 71c:	4f 93       	push	r20
 71e:	5f 93       	push	r21
 720:	6f 93       	push	r22
 722:	7f 93       	push	r23
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	af 93       	push	r26
 72a:	bf 93       	push	r27
 72c:	ef 93       	push	r30
 72e:	ff 93       	push	r31

    overflowCounter++;
 730:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <overflowCounter>
 734:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <overflowCounter+0x1>
 738:	a0 91 8e 00 	lds	r26, 0x008E	; 0x80008e <overflowCounter+0x2>
 73c:	b0 91 8f 00 	lds	r27, 0x008F	; 0x80008f <overflowCounter+0x3>
 740:	01 96       	adiw	r24, 0x01	; 1
 742:	a1 1d       	adc	r26, r1
 744:	b1 1d       	adc	r27, r1
 746:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <overflowCounter>
 74a:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <overflowCounter+0x1>
 74e:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <overflowCounter+0x2>
 752:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <overflowCounter+0x3>
    overflowCallback();
 756:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <overflowCallback>
 75a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <overflowCallback+0x1>
 75e:	09 95       	icall
}
 760:	ff 91       	pop	r31
 762:	ef 91       	pop	r30
 764:	bf 91       	pop	r27
 766:	af 91       	pop	r26
 768:	9f 91       	pop	r25
 76a:	8f 91       	pop	r24
 76c:	7f 91       	pop	r23
 76e:	6f 91       	pop	r22
 770:	5f 91       	pop	r21
 772:	4f 91       	pop	r20
 774:	3f 91       	pop	r19
 776:	2f 91       	pop	r18
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_13>:
/**
 * @brief This is the ISR for the USART RXC (USART, Rx Complete) 
 * 
 */
void __vector_13 (void) __attribute__((signal));
void __vector_13 (void){
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	2f 93       	push	r18
 78e:	3f 93       	push	r19
 790:	4f 93       	push	r20
 792:	5f 93       	push	r21
 794:	6f 93       	push	r22
 796:	7f 93       	push	r23
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	af 93       	push	r26
 79e:	bf 93       	push	r27
 7a0:	ef 93       	push	r30
 7a2:	ff 93       	push	r31

  	LOC_fptr_RXC_callback();
 7a4:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <LOC_fptr_RXC_callback>
 7a8:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <LOC_fptr_RXC_callback+0x1>
 7ac:	09 95       	icall
}
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	7f 91       	pop	r23
 7bc:	6f 91       	pop	r22
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0f be       	out	0x3f, r0	; 63
 7ca:	0f 90       	pop	r0
 7cc:	1f 90       	pop	r1
 7ce:	18 95       	reti

000007d0 <__vector_14>:
/**
 * @brief This is the ISR for the USART UDRE (USART Data Register Empty) 
 * 
 */
void __vector_14 (void) __attribute__((signal));
void __vector_14 (void){
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31

  	LOC_fptr_UDRE_callback();
 7f2:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <LOC_fptr_UDRE_callback>
 7f6:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <LOC_fptr_UDRE_callback+0x1>
 7fa:	09 95       	icall
}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	bf 91       	pop	r27
 802:	af 91       	pop	r26
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	7f 91       	pop	r23
 80a:	6f 91       	pop	r22
 80c:	5f 91       	pop	r21
 80e:	4f 91       	pop	r20
 810:	3f 91       	pop	r19
 812:	2f 91       	pop	r18
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <__vector_15>:
/**
 * @brief This is the ISR for the USART TXC (USART, Tx Complete) 
 * 
 */
void __vector_15 (void) __attribute__((signal));
void __vector_15 (void){
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31

  	LOC_fptr_TXC_callback();
 840:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <LOC_fptr_TXC_callback>
 844:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <LOC_fptr_TXC_callback+0x1>
 848:	09 95       	icall
 84a:	ff 91       	pop	r31
 84c:	ef 91       	pop	r30
 84e:	bf 91       	pop	r27
 850:	af 91       	pop	r26
 852:	9f 91       	pop	r25
 854:	8f 91       	pop	r24
 856:	7f 91       	pop	r23
 858:	6f 91       	pop	r22
 85a:	5f 91       	pop	r21
 85c:	4f 91       	pop	r20
 85e:	3f 91       	pop	r19
 860:	2f 91       	pop	r18
 862:	0f 90       	pop	r0
 864:	0f be       	out	0x3f, r0	; 63
 866:	0f 90       	pop	r0
 868:	1f 90       	pop	r1
 86a:	18 95       	reti

0000086c <main>:

int main(void)
{   
    ePIRStatus_t Last, new;

    HAL_PIR_Init(GPIOB, GPIO_PIN2);
 86c:	62 e0       	ldi	r22, 0x02	; 2
 86e:	86 e3       	ldi	r24, 0x36	; 54
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 2a 02 	call	0x454	; 0x454 <HAL_PIR_Init>
    
    LCD_Init();
 876:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Init>

    Last = HAL_PIR_ReadStatus(GPIOB, GPIO_PIN2);
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	86 e3       	ldi	r24, 0x36	; 54
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 3b 02 	call	0x476	; 0x476 <HAL_PIR_ReadStatus>
 884:	d8 2f       	mov	r29, r24
 886:	01 c0       	rjmp	.+2      	; 0x88a <main+0x1e>
#include "Atmega32_Drivers/MCAL/GPIO/Atmega32_GPIO.h"
#include "Atmega32_Drivers/HAL/LCD_Driver/LCD_interface.h"
#include "Atmega32_Drivers/HAL/PIR_Sensor_Driver/PIR_Interface.h"

int main(void)
{   
 888:	dc 2f       	mov	r29, r28

    Last = HAL_PIR_ReadStatus(GPIOB, GPIO_PIN2);

    while (1) 
    {
        new = HAL_PIR_ReadStatus(GPIOB, GPIO_PIN2);
 88a:	62 e0       	ldi	r22, 0x02	; 2
 88c:	86 e3       	ldi	r24, 0x36	; 54
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 3b 02 	call	0x476	; 0x476 <HAL_PIR_ReadStatus>
 894:	c8 2f       	mov	r28, r24
        
        if(new != Last)
 896:	d8 17       	cp	r29, r24
 898:	b9 f3       	breq	.-18     	; 0x888 <main+0x1c>
        {
            LCD_Clear_Screen();
 89a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <LCD_Clear_Screen>

            if(new == PIR_MotionDetected)
 89e:	c1 11       	cpse	r28, r1
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <main+0x40>
            {
                LCD_Send_String(stringfy("Motion Detected"));
 8a2:	80 e6       	ldi	r24, 0x60	; 96
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_Send_String>
 8aa:	ee cf       	rjmp	.-36     	; 0x888 <main+0x1c>

            }else{
                LCD_Send_String(stringfy("No Motion"));
 8ac:	80 e7       	ldi	r24, 0x70	; 112
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 1d 02 	call	0x43a	; 0x43a <LCD_Send_String>
 8b4:	e9 cf       	rjmp	.-46     	; 0x888 <main+0x1c>

000008b6 <_exit>:
 8b6:	f8 94       	cli

000008b8 <__stop_program>:
 8b8:	ff cf       	rjmp	.-2      	; 0x8b8 <__stop_program>
